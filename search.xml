<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019年icpc沈阳网络赛D题]]></title>
    <url>%2F2019%2F09%2F18%2F2019%E5%B9%B4icpc%E6%B2%88%E9%98%B3%E7%BD%91%E7%BB%9C%E8%B5%9BD%E9%A2%98%2F</url>
    <content type="text"><![CDATA[ACM-ICPC 2019 沈阳赛区网络预赛 D题题目链接 换根就是先DFS一遍之后,根据第一遍DFS得到的结果去处理第二遍DFS,第二遍DFS就是将每个点都看成一个根.本题令$cnt1[i][j]$为以$root$为根,$i$的子树中距$i$的距离%3为$j$的点的数量.$dp[i][j]$则是i的子树中距$i$的距离模3为$j$的距离路径总和.这两种状态可以用一遍DFS求得, $root$就是自己设的根.第二遍DFS就是处理每个点为根的情况.考虑$ cnt2[i][j] $ , 在以$root$为根的情况下, 非$i$的子节点$i$的距离%3为j的节点个数.$dp1[i][j$ ,在以$root$为根的情况下，非$i$的子节点到$i$的距离%3为$j$的距离和。 令$v$为当前节点, $u$为其父节点 推出式子 $cnt2[v][t] = (( cnt2[u][j] + cnt1[u][j] - cnt1[v][t1] )%mod + mod ) %mod;$$dp1[v][t] = ( (dp[u][j] - w * cnt1[v][t1] + mod ) \% mod + w * cnt2[v][t] - dp[v][t1]+ mod + dp1[u][j]) \% mod$其中因为u的子节点包括了v的子节点, 需要处理掉.就是减掉.在加上父亲非子节点的贡献.考虑路径和.同理, 减掉多余的贡献.加上父亲节点的非子节点的贡献. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116/************************************************************]&gt; File Name: D.cpp&gt; Author: ccdxc&gt; Mail: linyi0430@gmail.com&gt; Created Time: 2019年09月14日 星期六 21时31分19秒***************************************************************/#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;string&gt;#include&lt;cmath&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt;#define ll long long#define pb push_backusing namespace std;const int INF = 0x3f3f3f3f;const int Maxn = 1e5 + 10;const ll mod = 1e9 + 7;int n , head[Maxn];int cnt;ll cnt1[Maxn][3] , dp[Maxn][3];ll ans[3] , cnt2[Maxn][3] , dp2[Maxn][3];struct node&#123; int w ; int next , to;&#125;edge[Maxn];//初始化void init()&#123; cnt = 1; memset(head , -1 , sizeof(head)); ans[0] = ans[1] = ans[2] = 0; memset(dp,0,sizeof(dp)); memset(dp2,0,sizeof(dp2)); memset(cnt1,0,sizeof(cnt1)); memset(cnt2 , 0 ,sizeof(cnt2));&#125;//链式前向星存树void add(int u, int v , ll w)&#123; edge[cnt].w = w; edge[cnt].to = v; edge[cnt].next = head[u]; head[u] = cnt++;&#125;void dfs1(int u,int fa)&#123; cnt1[u][0] = 1; for(int i = head[u] ;i != -1;i = edge[i].next)&#123; int v = edge[i].to , w = edge[i].w; if(v == fa) continue; dfs1(v , u); for(int j = 0;j &lt; 3;j++)&#123; int t = (w + j) % 3; cnt1[u][t] = (cnt1[u][t] + cnt1[v][j])%mod; dp[u][t] = (dp[u][t] + dp[v][j] + w * cnt1[v][j]) %mod; &#125; &#125;&#125;void dfs2(int u , int fa)&#123; for(int i = head[u];i != -1;i = edge[i].next)&#123; int v = edge[i].to , w = edge[i].w; if(v == fa) continue; for(int j = 0;j &lt; 3;j++)&#123; int t = (w + j)%3; int t1 = ((j - w) % 3 + 3 ) % 3; cnt2[v][t] = ((cnt1[u][j] - cnt1[v][t1] + cnt2[u][j])%mod + mod )%mod; dp2[v][t] = ((dp[u][j] - dp[v][t1]-w*cnt1[v][t1]) % mod + dp2[u][j] + w * cnt2[v][t]) % mod; &#125; dfs2(v , u); &#125; &#125;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); int u , v , w; while(cin &gt;&gt; n)&#123; init(); for(int i = 1;i &lt; n;i++)&#123; cin &gt;&gt; u &gt;&gt; v &gt;&gt; w; u++ , v++; add(u, v , w); add(v , u , w); &#125; //第一遍dfs求已每个节点为子树时，每个子节点的距离 以及 模3的个数 dfs1(1 , -1); //第二遍dfs，通过换根求出，每个节点与父亲节点的距离以及模3的个数 dfs2(1,-1); //最后答案就是每个节点的父亲节点的距离加上每个节点的子节点之和，遍历一遍即可 for(int i = 1;i &lt;= n;i++)&#123; for(int j = 0;j &lt; 3;j++)&#123; ans[j] =( ans[j]+ dp[i][j] + dp2[i][j] ) %mod; &#125; &#125; cout &lt;&lt; ans[0] &lt;&lt;&quot; &quot; &lt;&lt; ans[1] &lt;&lt;&quot; &quot;&lt;&lt; ans[2]&lt;&lt;endl; &#125;&#125;/*60 1 51 2 22 3 11 4 44 5 3*/]]></content>
      <categories>
        <category>树形DP</category>
        <category>点分治</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年icpc上海网络赛题解]]></title>
    <url>%2F2019%2F09%2F18%2F2019%E5%B9%B4icpc%E4%B8%8A%E6%B5%B7%E7%BD%91%E7%BB%9C%E8%B5%9B%E9%A2%98%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[ACM-ICPC 2019 上海赛区网络预赛非官方题解题目链接 最近比较忙还没开始补 ，先占坑 ， 随后再来。未完待续$\ldots$]]></content>
  </entry>
  <entry>
    <title><![CDATA[树形DP]]></title>
    <url>%2F2019%2F09%2F18%2F%E6%A0%91%E5%BD%A2DP%2F</url>
    <content type="text"><![CDATA[树形DP，即在树上进行DP。由于树固定的递归性质，树形DP一般都是递归进行的。 例题洛谷 P1352 没有上司的舞会 某大学有$ n $个职员，编号为$ 1～N $ 。他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数$ a_i $，但是呢，如果某个职员的上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。 我们可以定义$f(i , 0/1)$代表以$i$为根的子树的最优解（第二维的值为0代表$i$不参加舞会的情况，1代表$i$参加舞会的情况）。 显然，我们可以推出下面两个状态转移方程（其中$x$都是$i$的儿子）: $ f(i , 0) = \sum max{ f(x , 1) , f(x , 0)} $ ( 上司不参加舞会时，下属可以参加，也可以不参加) $f(i , 1) = \sum f(x , 0) + a_i$ (上司参加舞会时，属下都不会参加) 我们可以通过 DFS，在返回上一层时更新当前节点的最优解。 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/**********************************************************&gt; File Name: P1352.cpp&gt; Author: ccdxc&gt; Mail: linyi0430@gmail.com&gt; Created Time: 2019年09月18日 星期三 13时19分23秒 *********************************************************/#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;string&gt;#include&lt;cmath&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt;#define ll long long #define gc() getchar()#define pb push_backusing namespace std;const int INF = 0x3f3f3f3f;const int Maxn = 1e5 + 10;int f[Maxn][2];int head[Maxn];inline int read()&#123; //快读不多解释 int a=0;char p=gc();int f=0; while(!isdigit(p))&#123;f|=(p==&apos;-&apos;);p=gc();&#125; while(isdigit(p))&#123;a=(a&lt;&lt;3)+(a&lt;&lt;1)+(p^48);p=gc();&#125; return f?-a:a;&#125;//链式前向星存图struct Edge&#123; int to , next ;&#125;edge[Maxn];int cnt , n , a[Maxn];void add(int u , int v)&#123; edge[cnt].to = v; edge[cnt].next = head[u]; head[u] = cnt++;&#125;void dfs(int u , int fa)&#123; for(int i = head[u] ; i ; i = edge[i].next)&#123; int v = edge[i].to; if(v == fa) continue; dfs(v , u); f[u][0] += max(f[v][1] , f[v][0]); f[u][1] += f[v][0]; &#125; &#125;int main()&#123; cnt = 1; n = read(); memset(head , -1 ,sizeof(head)); //head初始化 for(int i = 1;i &lt;= n;i++) a[i] = read() , f[i][1] = a[i]; int u , v; for(int i = 1;i &lt;= n;i++)&#123; u =read(); v= read(); add(u, v); add(v ,u); &#125; dfs(1 , 0); cout &lt;&lt; max(f[1][1] , f[1][0]) &lt;&lt;endl;&#125; 未完待续$\ldots$]]></content>
      <categories>
        <category>树形DP</category>
        <category>OI wiki</category>
        <category>洛谷P1352</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
        <tag>洛谷P1352</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态规划学习]]></title>
    <url>%2F2019%2F09%2F11%2F%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[DP（又称动态规划） 学了两年都没学明白,为了最后半年的区域赛,系统的学一下,更好的准备接下来的比赛. 动态规划部分简介动态规划应用于子问题重叠的情况： 要去刻画最有界的结构特征; 尝试递归地定义最优解的值(就是我们常说的考虑从$i-1$到$i$) 计算最优值 利用计算出的信息构造一个最优解 经典例题给定一段钢条，和不同长度的价格，问如何切割使得总价格最大。 为了求解规模为$n$的原问题，我们先求解形式完全一样，但规模更小的子问题。 即当完成首次切割后，我们将两段钢条看成两个独立的钢条切割问题实例。 我们通过组合相关子问题的最优解，并在所有可能的两段切割方案中选取组合收益最大者，构成原问题的最优解。 最优子结构： 问题的最优解由相关自问题的最优解组合而成动态规划的两种实现方法： 带备忘的自定向下法（记忆化搜索）; 自底向上法（将子问题按照规模排序，类似于递推）。算导用子问题图上按照逆拓扑排序求解子问题，引出记忆化搜索。重构解（输出方案）： 转移的时候记录最优子结构的位置。 矩阵链乘法给出$n$个矩阵的序列，希望计算他们的乘积，问最少需要多少次乘法运算？（认为$p \times q $的矩阵与$q \times r$的矩阵相乘的代价是$p \times q \times r$）完全括号化方案是指要给出谁先和谁乘。 动态规划原理两个要素： 最优子结构具有最优子结构也可能是适合用贪心的方法求解。注意要确保我们考察了解最优解中用到的所有子问题。 证明问题最优解的第一个组成部分是作出一个选择; 对于一个给定问题，在其可能的第一步选择中，你界定已经知道那种选择才会得到最优解。你现在并不关心这种选择具体是如何得道的，只是假定已经知道了这种选择; 定可获得的最优解的选择后，确定这次选择会产生哪些子问题，以及如何最好地刻画子问题空间； 证明作为构成原问题最优解的组成部分，每个子问题的解就是它本身的最优解。方法是反证法，考虑加入某个子问题的解不是其自身的最优解，那么就可以从原问题的解中用该子问题的最优解替换掉当前的非最优解，从而得到原问题的一个更优的解，从而与原问题最优解的假设矛盾。要保持子问题空间尽量简单，只在必要时扩展。 最优子结构的不同体现在两个方面： 原问题的最优解中涉及多少个子问题； 确定最优解使用哪些子问题时，需要考察多少种选择。子问题图中每个定点对应一个子问题，而需要考察的选择对应关联至子问题顶点的边。经典问题： 无权最短路径：具有最优子结构性质。 无权最长路经：此问题不具有，是 NPC 的。区别在于，要保证子问题无关，即同一个原问题的一个子问题的解不影响另一个子问题的解。相关：求解一个子问题时用到了某些资源，导致这些资源在求解其他子问题时不可用。子问题重叠子问题空间要足够小，即问题的递归算法会反复的求解相同的子问题，而不是一直生成新的子问题。重构最优解存表记录最优分割的位置，就不用重新按照代价来重构。 最长公共子序列子序列不连续每个$c[i][j]$只依赖于$c[i-1][j] $、$ c[i][j-1]$和$c[i-1][j-1]$。记录最优方案的时候可以不需要额外建表（优化空间），因为重新选择一遍（转移过程）也是$O(1)$的。 最优二叉搜索树给二叉搜索树的每个节点定义一个权值，问如何安排使得权值和深度的乘积最小考虑当一棵子树成为了一个节点的子树时，答案（期望搜索代价）有何变化？由于每个节点的深度都增加了1,这棵子树的期望搜索代价的增加值应为所有概率之和。 动态规划：状态空间是$O(n^t)$的，每一项依赖其他$O(n^e)$项。 最长连续不下降子序列对n个数求它的最长不下降子序列，也就是求最长的上升（一个数比一个数大）子序列有多长。因为是连续的，所以只要遇上一个元素比较即可. int a[MAXN]; int dp() { int now = 1, ans = 1; for (int i = 2; i &lt;= n; i++) { if (a[i] &gt; a[i - 1]) now++; else now = 1; ans = max(now, ans); } return ans; } 未完待续$\ldots$]]></content>
      <categories>
        <category>DP</category>
        <category>kuangbin</category>
        <category>OI wiki</category>
      </categories>
      <tags>
        <tag>DP 记忆化搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的开始，重新出发……]]></title>
    <url>%2F2019%2F09%2F05%2F%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%8C%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91%E2%80%A6%E2%80%A6%2F</url>
    <content type="text"><![CDATA[突发奇想想要搭建一个自己的博客，记录大学的学习与时光，原来在$CSDN$ ，可惜$CSDN$的广告太多了。放心这里没有广告。 重新开始三年 三年了,从来天津那天到现在整整两年，想起两年前,那两个怀揣这梦想的男孩带着两个行李箱远离家乡,北漂,哈哈哈,来这里两年了,发生了很多事,学会了很多东西,有知识,有做人做事.慢慢的,和朋友越走越远,当初一起北漂的朋友走散了,再也找不回当初的感觉了. 大学撰写一下自己的大学时光,最美好的青春,高中我们朦朦懂懂,大学我们情窦初开,到了大学才发现与自己想象的大学生活与众不同,每天都有课,即使没有课,也会有其他的一些琐碎事.每天混混顿顿,就像是混子,后来进去了ACM,这个东西难,但是确是有意思,但是它却不是一个大众的游戏,它是属于强者的游戏.两年,学了两年虽然没有惊天动地的成就.但是,它带给我的是和队友打比赛时的欢乐,做不出来题时的慌张,它给我的大学时光带来了挑战,人生活着不就是为了挑战么?有时候会特别后悔,如果我没有打ACM,那么我可能会去保研,参加其他的比赛,虽然那些也很有意思,但是相比之下,还是ACM更有吸引力. 未完待续$\ldots$]]></content>
      <categories>
        <category>杂文 感言 flag</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
